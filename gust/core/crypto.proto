/*
 * Copyright Â© 2020, The Gust Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

/*
 * Specifies core structures related to cryptographic operations and primitives. These records and enumerates are used
 * throughout the codebase as a standard base set of definitions for hashing, encryption, and more.
 */
syntax = "proto3";
package crypto;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_namespace = "Elide\\Core\\Crypto";
option php_class_prefix = "ELD";
option swift_prefix = "Elide";
option objc_class_prefix = "ELD";
option ruby_package = "Elide::Core::Crypto";
option java_package = "tools.elide.core.crypto";
option csharp_namespace = "Elide.Core.Crypto";
option go_package = "github.com/elide-tools/elide/core/crypto;crypto";


// Specifies hash algorithms supported by the asset manifest code. We keep a token for this around so that we can
// easily detect configuration changes and make evictions accordingly.
enum HashAlgorithm {
  // No hash algorithm was/is active.
  IDENTITY = 0;

  // Use MD5 for chunk hashing.
  MD5 = 1;

  // Use SHA1 for chunk hashing.
  SHA1 = 2;

  // Use SHA256 for chunk hashing.
  SHA256 = 3;

  // Use SHA512 for chunk hashing.
  SHA512 = 4;
}
